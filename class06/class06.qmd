---
title: "Class 06: R Function"
author: "Emily Rodriguez"
format: pdf
editor: visual
---

> Q1. Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: "https://tinyurl.com/gradeinput" \[**3pts**\]


```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We can use the 'mean()' function to calculate the average for a given student vector.


```{r}
mean(student1)
```

```{r}
mean(student2, na.rm = TRUE)
```

```{r}
mean(student3, na.rm = TRUE)
```

We can replace the missed assignment NA values with a score of zero.
- How do I do this?

We can use the `is.na()` function to help perhaps?

```{r}
student2
is.na(student2)
```

```{r}
student2[ is.na(student2)]
```

```{r}
is.na(student2)
which(is.na(student2))
```


It is time to work with new temp objects (that I will call `x`) so I don't screw up my original objects

```{r}
x <- student3
x[ is.na(x)] <- 0
mean(x)
```


Finally, we want to drop the lowest score before calculating the mean. This is equivalent to allowing the student to drop their worst assignment score.

I can use the minus sign together with `which.in()` to exclude the lowest value:
```{r}
x <- student1
x
x[ -which.min(x) ]

```

Now I need to put this all back together to make our wokring snippet:

```{r}
x <- student3
x
# Map/Replace NA values to zero
x[ is.na(x) ] <- 0

# Exclude the lowest score and Calculate the mean
mean( x[ -which.min(x) ] )

```

Cool! This is my working snippet that I can turn into a function called `grade()`

All functions in R have at least 3 things:

- **Name**, in our case "grade"
- Input **arguments**, student1 etc.
- **Body**,this is our working snippet above.

```{r}
grade <- function(x) {
  # Map/Replace NA values to zero
  x[ is.na(x) ] <- 0

  # Exclude the lowest score and Calculate the mean
  mean( x[ -which.min(x) ] )
}

```


Can I use this function now?

```{r}
grade(student1)
```

Read a gradebook from online:

```{r}
hw <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
hw
```

We can use the `apply()` function to grade all the students in this class with our new `grade()` function.

They `apply()` functions allows us to run any function over either the rows or columns of a data.frame. Let's see how it works:


```{r}
ans <- apply(hw, 1,  grade)
ans
```

>Q2. Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]


```{r}
ans[ which.max(ans) ]
```

**student-18** is the top scoring student overall in the gradebook.


> Q3. From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? [2pts]


```{r}
ave.scores <- apply(hw, 2, mean, na.rm = TRUE) 
which.min(ave.scores)
```

```{r}
tot.scores <- apply(hw, 2, sum, na.rm = TRUE) 
which.min( tot.scores )
```

```{r}
tot.scores
ave.scores
```

**Homework 2** was the toughest for the students.

> Q4. Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? [1pt]


```{r}
hw$hw1
```

```{r}
ans
```

```{r}
cor(hw$hw1, ans)
cor(hw$hw3, ans)
```

If i try on hw2 I get NA as there are missing homeworks (i.e. NA values)

```{r}
hw$hw2
```

I will mask all NA values to zero.

```{r}
mask <- hw
mask[ is.na(mask) ] <- 0
mask
```

```{r}
cor(mask$hw5, ans)
```

We can use the `apply()` function here on the columns of hw (i.e. the individual homeworks) and pass it the overall scores for the class (in my `ans` object as an extra argument).

```{r}
apply(mask, 2, cor, y = ans)
```

**Homework 5** was the most predictive of overall score.








